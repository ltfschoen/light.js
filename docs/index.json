[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/api.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { getApi, setApi } from './api';\nimport { resolveApi } from './utils/testHelpers/mockApi';\n\nit('should return the default Api object', () => {\n  expect(getApi().provider._url).toBe('ws://localhost:8546');\n});\n\nit('should correctly set a new Api', () => {\n  const mockApi = resolveApi(undefined, false); // Pubsub\n  setApi(mockApi);\n  expect(getApi()).toBe(mockApi);\n});\n\nit('should correctly set a new Api', () => {\n  const mockApi = resolveApi(undefined, false); // Not pubsub\n  setApi(mockApi);\n  expect(getApi()).toBe(mockApi);\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/api.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/api.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as Api from '@parity/api';\n\n// import { name } from '../package.json';\n\nlet api;\n\n/**\n * Sets an Api object.\n *\n * @param {Object} newApi - The Api object.\n * @return {Null}\n */\nexport const setApi = newApi => {\n  api = newApi;\n  if (!api.isPubSub) {\n    console.warn(\n      `Current provider does not support pubsub. @parity/light.js will poll every second to listen to changes.`\n    );\n  }\n};\n\n/**\n * We only ever use api() at call-time of functions; this allows the options\n * (particularly the transport option) to be changed dynamically and the\n * data structure to be reused.\n *\n * @return {Object} - The current Api object.\n */\nexport const getApi = () => {\n  if (!api) {\n    api = new Api(new Api.Provider.Ws('ws://localhost:8546'));\n  }\n  return api;\n};\n\nexport default getApi;\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/api.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "setApi",
    "memberof": "src/api.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api.ts~setApi",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/api.ts",
    "importStyle": "{setApi}",
    "description": "Sets an Api object.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newApi",
        "description": "The Api object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "getApi",
    "memberof": "src/api.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api.ts~getApi",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/api.ts",
    "importStyle": "{getApi}",
    "description": "We only ever use api() at call-time of functions; this allows the options\n(particularly the transport option) to be changed dynamically and the\ndata structure to be reused.",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The current Api object."
    },
    "params": []
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/frequency/accounts.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as accounts from './accounts';\nimport testFrequency from '../utils/testHelpers/testFrequency';\n\nObject.keys(accounts).forEach(key => testFrequency(key, accounts[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/accounts.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/frequency/accounts.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { AccountsInfo, Address, FrequencyObservable } from '../types';\nimport api from '../api';\nimport createOnFromPubsub from './utils/createOnFromPubsub';\n\n/**\n * Observable that emits each time the default account changes\n */\nexport const onAccountsChanged$: FrequencyObservable<\n  Array<Address>\n> = createOnFromPubsub('eth_accounts', api);\nonAccountsChanged$.metadata = { name: 'onAccountsChanged$' };\n\n/**\n * Observable that emits each time the default account changes\n */\nexport const onAccountsInfoChanged$ = createOnFromPubsub<AccountsInfo>(\n  'parity_accountsInfo',\n  api\n);\nonAccountsInfoChanged$.metadata = { name: 'onAccountsInfoChanged$' };\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/accounts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "onAccountsChanged$",
    "memberof": "src/frequency/accounts.ts",
    "static": true,
    "longname": "src/frequency/accounts.ts~onAccountsChanged$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/accounts.ts",
    "importStyle": "{onAccountsChanged$}",
    "description": "Observable that emits each time the default account changes",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "onAccountsInfoChanged$",
    "memberof": "src/frequency/accounts.ts",
    "static": true,
    "longname": "src/frequency/accounts.ts~onAccountsInfoChanged$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/accounts.ts",
    "importStyle": "{onAccountsInfoChanged$}",
    "description": "Observable that emits each time the default account changes",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/frequency/blocks.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as blocks from './blocks';\nimport testFrequency from '../utils/testHelpers/testFrequency';\n\nObject.keys(blocks).forEach(key => testFrequency(key, blocks[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/blocks.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/frequency/blocks.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { filter, map } from 'rxjs/operators';\n\nimport api from '../api';\nimport createOnFromPubsub from './utils/createOnFromPubsub';\nimport { FrequencyObservable } from '../types';\n\n/**\n * Observable that emits on every new block.\n */\nexport const onEveryBlock$ = createOnFromPubsub('eth_blockNumber', api).pipe(\n  map(v => +v) // Return number instead of BigNumber\n) as FrequencyObservable<number>;\nonEveryBlock$.metadata = { name: 'onEveryBlock$' };\n\n/**\n * Observable that emits on every 2nd block.\n */\nexport const onEvery2Blocks$ = onEveryBlock$.pipe(\n  filter(n => n % 2 === 0) // Around ~30s on mainnet\n) as FrequencyObservable<number>;\nonEvery2Blocks$.metadata = { name: 'onEvery2Blocks$' };\n\n/**\n * Observable that emits on every 4th block.\n */\nexport const onEvery4Blocks$ = onEveryBlock$.pipe(\n  filter(n => n % 4 === 0) // Around ~1min on mainnet\n) as FrequencyObservable<number>;\nonEvery4Blocks$.metadata = { name: 'onEvery4Blocks$' };\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/blocks.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "onEveryBlock$",
    "memberof": "src/frequency/blocks.ts",
    "static": true,
    "longname": "src/frequency/blocks.ts~onEveryBlock$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/blocks.ts",
    "importStyle": "{onEveryBlock$}",
    "description": "Observable that emits on every new block.",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "onEvery2Blocks$",
    "memberof": "src/frequency/blocks.ts",
    "static": true,
    "longname": "src/frequency/blocks.ts~onEvery2Blocks$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/blocks.ts",
    "importStyle": "{onEvery2Blocks$}",
    "description": "Observable that emits on every 2nd block.",
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "onEvery4Blocks$",
    "memberof": "src/frequency/blocks.ts",
    "static": true,
    "longname": "src/frequency/blocks.ts~onEvery4Blocks$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/blocks.ts",
    "importStyle": "{onEvery4Blocks$}",
    "description": "Observable that emits on every 4th block.",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/frequency/health.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as health from './health';\nimport testFrequency from '../utils/testHelpers/testFrequency';\n\nObject.keys(health).forEach(key => testFrequency(key, health[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/health.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/frequency/health.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport api from '../api';\nimport createOnFromPubsub from './utils/createOnFromPubsub';\n\n/**\n * Observable that emits when syncing status changes.\n */\nexport const onNodeHealthChanged$ = createOnFromPubsub(\n  'parity_nodeHealth',\n  api\n);\nonNodeHealthChanged$.metadata = { name: 'onNodeHealthChanged$' };\n\n/**\n * Observable that emits when syncing status changes.\n */\nexport const onSyncingChanged$ = createOnFromPubsub('eth_syncing', api);\nonSyncingChanged$.metadata = {\n  name: 'onSyncingChanged$'\n};\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/health.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "onNodeHealthChanged$",
    "memberof": "src/frequency/health.ts",
    "static": true,
    "longname": "src/frequency/health.ts~onNodeHealthChanged$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/health.ts",
    "importStyle": "{onNodeHealthChanged$}",
    "description": "Observable that emits when syncing status changes.",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "onSyncingChanged$",
    "memberof": "src/frequency/health.ts",
    "static": true,
    "longname": "src/frequency/health.ts~onSyncingChanged$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/health.ts",
    "importStyle": "{onSyncingChanged$}",
    "description": "Observable that emits when syncing status changes.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/frequency/other.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as other from './other';\nimport testFrequency from '../utils/testHelpers/testFrequency';\n\nObject.keys(other).forEach(key => testFrequency(key, other[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/other.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/frequency/other.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { of } from 'rxjs';\n\nimport { FrequencyObservable } from '../types';\n\n/**\n * Observable that emits only once.\n */\nexport const onStartup$ = of(0) as FrequencyObservable<number>;\nonStartup$.metadata = { name: 'onStartup$' };\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/other.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "onStartup$",
    "memberof": "src/frequency/other.ts",
    "static": true,
    "longname": "src/frequency/other.ts~onStartup$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/other.ts",
    "importStyle": "{onStartup$}",
    "description": "Observable that emits only once.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/frequency/time.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as time from './time';\nimport testFrequency from '../utils/testHelpers/testFrequency';\n\nObject.keys(time).forEach(key => testFrequency(key, time[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/time.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/frequency/time.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { timer } from 'rxjs';\n\nimport { FrequencyObservable } from '../types';\n\n/**\n * Observable that emits on every second.\n */\nexport const onEverySecond$ = timer(0, 1000) as FrequencyObservable<number>;\nonEverySecond$.metadata = { name: 'onEverySecond$' };\n\n/**\n * Observable that emits on every other second.\n */\nexport const onEvery2Seconds$ = timer(0, 2000) as FrequencyObservable<number>;\nonEvery2Seconds$.metadata = { name: 'onEvery2Seconds$' };\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/time.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "onEverySecond$",
    "memberof": "src/frequency/time.ts",
    "static": true,
    "longname": "src/frequency/time.ts~onEverySecond$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/time.ts",
    "importStyle": "{onEverySecond$}",
    "description": "Observable that emits on every second.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "onEvery2Seconds$",
    "memberof": "src/frequency/time.ts",
    "static": true,
    "longname": "src/frequency/time.ts~onEvery2Seconds$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/frequency/time.ts",
    "importStyle": "{onEvery2Seconds$}",
    "description": "Observable that emits on every other second.",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/frequency/utils/createOnFromPubsub.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport createOnFromPubsub from './createOnFromPubsub';\nimport isObservable from '../../utils/isObservable';\nimport { rejectApi, resolveApi } from '../../utils/testHelpers/mockApi';\n\nit('should return an Observable', () => {\n  expect(isObservable(createOnFromPubsub('fake_method', resolveApi))).toBe(\n    true\n  );\n});\n\nit('should fire an event when pubsub publishes', done => {\n  createOnFromPubsub('fake_method', resolveApi).subscribe(data => {\n    expect(data).toBe('foo');\n    done();\n  });\n});\n\nit('should fire an error when pubsub errors', done => {\n  createOnFromPubsub('fake_method', rejectApi).subscribe(null, err => {\n    expect(err).toEqual(new Error('bar'));\n    done();\n  });\n});\n\nit('should fire an event when polling pubsub  publishes', done => {\n  createOnFromPubsub('fake_method', () =>\n    resolveApi(undefined, false)\n  ).subscribe(data => {\n    expect(data).toBe('foo');\n    done();\n  });\n});\n\nit('should fire an error when polling pubsub errors', done => {\n  createOnFromPubsub('fake_method', () =>\n    rejectApi(undefined, false)\n  ).subscribe(null, err => {\n    expect(err).toEqual(new Error('bar'));\n    done();\n  });\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/frequency/utils/createOnFromPubsub.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/rpc/eth/eth.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as eth from './eth';\nimport testRpc from '../../utils/testHelpers/testRpc';\n\nObject.keys(eth).forEach(key => testRpc(key, eth[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/eth/eth.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/rpc/eth/eth.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { Address, RpcObservable } from '../../types';\nimport api from '../../api';\nimport createRpc$ from '../utils/createRpc';\nimport getFrequency from '../utils/getFrequency';\nimport { isNullOrLoading, RPC_LOADING } from '../../utils/isLoading';\nimport {\n  onAccountsChanged$,\n  onEvery2Blocks$,\n  onEveryBlock$,\n  onStartup$,\n  onSyncingChanged$\n} from '../../frequency';\nimport { switchMapPromise } from '../../utils/operators';\n\n/**\n * Observable which contains the array of all addresses managed by the light\n * client.\n *\n * Calls eth_accounts.\n *\n */\nexport const accounts$ = createRpc$<Address[]>({\n  calls: ['eth_accounts'],\n  frequency: [onAccountsChanged$]\n})(() => getFrequency(accounts$));\n\n/**\n * Get the balance of a given account. Calls `eth_getBalance`.\n */\nexport const balanceOf$ = createRpc$<Object>({\n  calls: ['eth_getBalance'],\n  frequency: [onEvery2Blocks$, onStartup$]\n})((address: Address) =>\n  getFrequency(balanceOf$).pipe(\n    switchMapPromise(() => api().eth.getBalance(address))\n  )\n);\n\n/**\n * Get the default account managed by the light client.\n */\nexport const defaultAccount$ = createRpc$<Address>({\n  dependsOn: ['accounts$']\n})(() => accounts$().pipe(map(accounts => accounts[0])));\n\n/**\n * Get the current block height.\n */\nexport const height$ = createRpc$<number>({ frequency: [onEveryBlock$] })(() =>\n  getFrequency(height$)\n);\n\n/**\n * Alias for {@link height$}.\n */\nexport const blockNumber$ = createRpc$<number>({ dependsOn: ['height$'] })(() =>\n  height$()\n);\n\n/**\n * Alias for {@link defaultAccount$}.\n */\nexport const me$ = createRpc$<Address>({\n  dependsOn: ['defaultAccount$']\n})(() => defaultAccount$());\n\n/**\n * Shorthand for fetching the current account's balance.\n */\nexport const myBalance$ = createRpc$<Object>({\n  dependsOn: ['balanceOf$', 'defaultAccount$']\n})(() =>\n  defaultAccount$().pipe(\n    switchMap(\n      defaultAccount =>\n        isNullOrLoading(defaultAccount)\n          ? of(RPC_LOADING)\n          : balanceOf$(defaultAccount)\n    )\n  )\n);\n\n/**\n * Get the syncing state.\n *\n * @return {RpcObservable<Object | Boolean>} - An Observable containing the\n */\nexport const syncing$ = createRpc$<Object | boolean>({\n  frequency: [onSyncingChanged$]\n})(() => getFrequency(syncing$));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/eth/eth.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "accounts$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~accounts$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{accounts$}",
    "description": "Observable which contains the array of all addresses managed by the light\nclient.\n\nCalls eth_accounts.",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "balanceOf$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~balanceOf$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{balanceOf$}",
    "description": "Get the balance of a given account. Calls `eth_getBalance`.",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "defaultAccount$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~defaultAccount$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{defaultAccount$}",
    "description": "Get the default account managed by the light client.",
    "lineNumber": 34,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "height$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~height$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{height$}",
    "description": "Get the current block height.",
    "lineNumber": 40,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "blockNumber$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~blockNumber$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{blockNumber$}",
    "description": "Alias for {@link height$}.",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "me$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~me$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{me$}",
    "description": "Alias for {@link defaultAccount$}.",
    "lineNumber": 48,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "myBalance$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~myBalance$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{myBalance$}",
    "description": "Shorthand for fetching the current account's balance.",
    "lineNumber": 54,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "syncing$",
    "memberof": "src/rpc/eth/eth.ts",
    "static": true,
    "longname": "src/rpc/eth/eth.ts~syncing$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/eth/eth.ts",
    "importStyle": "{syncing$}",
    "description": "Get the syncing state.",
    "lineNumber": 64,
    "return": {
      "nullable": null,
      "types": [
        "RpcObservable<Object | Boolean>"
      ],
      "spread": false,
      "description": "An Observable containing the"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/rpc/other/post.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { Observable } from 'rxjs';\n\nimport api from '../../api';\nimport { distinctReplayRefCount } from '../../utils/operators';\nimport { RpcObservable, Tx, TxStatus } from '../../types';\n\n/**\n * Post a transaction to the network.\n *\n * Calls, in this order, `eth_estimateGas`, `parity_postTransaction`,\n * `parity_checkRequest` and `eth_getTransactionReceipt` to get the status of\n * the transaction.\n *\n * @param {Object} options? - Options to pass.\n * @return {Observable<Object>} - The status of the transaction.\n */\nexport const post$: RpcObservable<TxStatus> = (\n  tx: Tx,\n  options: { estimate?: boolean } = {}\n) => {\n  const source$ = Observable.create(async observer => {\n    try {\n      if (options.estimate) {\n        observer.next({ estimating: true });\n        const gas = await api().eth.estimateGas(tx);\n        observer.next({ estimated: gas });\n      }\n      const signerRequestId = await api().parity.postTransaction(tx);\n      observer.next({ requested: signerRequestId });\n      const transactionHash = await api().pollMethod(\n        'parity_checkRequest',\n        signerRequestId\n      );\n      if (tx.condition) {\n        observer.next({ signed: transactionHash, schedule: tx.condition });\n      } else {\n        observer.next({ signed: transactionHash });\n        const receipt = await api().pollMethod(\n          'eth_getTransactionReceipt',\n          transactionHash,\n          receipt =>\n            receipt && receipt.blockNumber && !receipt.blockNumber.eq(0)\n        );\n        observer.next({ confirmed: receipt });\n      }\n\n      observer.complete();\n    } catch (error) {\n      observer.next({ failed: error });\n      observer.error(error);\n    }\n  }).pipe(distinctReplayRefCount());\n\n  source$.subscribe(); // Run this Observable immediately;\n  return source$;\n};\npost$.metadata = {\n  calls: [\n    'eth_estimateGas',\n    'parity_postTransaction',\n    'parity_checkRequest',\n    'eth_getTransactionReceipt'\n  ]\n};\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/other/post.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "post$",
    "memberof": "src/rpc/other/post.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rpc/other/post.ts~post$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/other/post.ts",
    "importStyle": "{post$}",
    "description": "Post a transaction to the network.\n\nCalls, in this order, `eth_estimateGas`, `parity_postTransaction`,\n`parity_checkRequest` and `eth_getTransactionReceipt` to get the status of\nthe transaction.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options?",
        "description": "Options to pass."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Object>"
      ],
      "spread": false,
      "description": "The status of the transaction."
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/rpc/parity/parity.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport * as parity from './parity';\nimport testRpc from '../../utils/testHelpers/testRpc';\n\nObject.keys(parity).forEach(key => testRpc(key, parity[key]));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/parity/parity.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/rpc/parity/parity.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { AccountsInfo } from '../../types';\nimport api from '../../api';\nimport createRpc$ from '../utils/createRpc';\nimport getFrequency from '../utils/getFrequency';\nimport {\n  onAccountsInfoChanged$,\n  onNodeHealthChanged$,\n  onStartup$\n} from '../../frequency';\nimport { switchMapPromise } from '../../utils/operators';\n\n/**\n * Get accounts info. Calls `parity_accountsInfo`.\n */\nexport const accountsInfo$ = createRpc$<AccountsInfo>({\n  calls: ['parity_accountsInfo'],\n  frequency: [onAccountsInfoChanged$]\n})(() => getFrequency(accountsInfo$));\n\n/**\n * Get the name of the current chain. Calls `parity_netChain`.\n */\nexport const chainName$ = createRpc$<string>({\n  calls: ['parity_netChain'],\n  frequency: [onStartup$]\n})(() =>\n  getFrequency(chainName$).pipe(switchMapPromise(() => api().parity.netChain()))\n);\n\n/**\n * Get the node's health. Calls `parity_nodeHealth`.\n */\nexport const nodeHealth$ = createRpc$<Object>({\n  calls: ['parity_nodeHealth'],\n  frequency: [onNodeHealthChanged$]\n})(() => getFrequency(nodeHealth$));\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/parity/parity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "accountsInfo$",
    "memberof": "src/rpc/parity/parity.ts",
    "static": true,
    "longname": "src/rpc/parity/parity.ts~accountsInfo$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/parity/parity.ts",
    "importStyle": "{accountsInfo$}",
    "description": "Get accounts info. Calls `parity_accountsInfo`.",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "chainName$",
    "memberof": "src/rpc/parity/parity.ts",
    "static": true,
    "longname": "src/rpc/parity/parity.ts~chainName$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/parity/parity.ts",
    "importStyle": "{chainName$}",
    "description": "Get the name of the current chain. Calls `parity_netChain`.",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "nodeHealth$",
    "memberof": "src/rpc/parity/parity.ts",
    "static": true,
    "longname": "src/rpc/parity/parity.ts~nodeHealth$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/rpc/parity/parity.ts",
    "importStyle": "{nodeHealth$}",
    "description": "Get the node's health. Calls `parity_nodeHealth`.",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/rpc/utils/createRpc.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { timer } from 'rxjs';\n\nimport createRpc from './createRpc';\nimport mockRpc$ from '../../utils/testHelpers/mockRpc';\n\nit('should return a function', () => {\n  expect(typeof createRpc()).toBe('function');\n});\n\nit('should add empty metadata by default', () => {\n  expect(createRpc()(mockRpc$).metadata).toEqual({});\n});\n\nit('should append input metadata', () => {\n  expect(createRpc({ name: 'bar' })(mockRpc$).metadata).toEqual({\n    name: 'bar'\n  });\n});\n\nit('should contain frequencyMixins', () => {\n  expect(typeof createRpc()(mockRpc$).setFrequency).toBe('function');\n});\n\nit('should set correct frequency', () => {\n  const frequency = timer(0, 1000);\n  const rpc$ = createRpc()(mockRpc$);\n  rpc$.setFrequency([frequency]);\n  expect(rpc$.metadata.frequency).toEqual([frequency]);\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/utils/createRpc.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/rpc/utils/getFrequency.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport getFrequency from './getFrequency';\nimport isObservable from '../../utils/isObservable';\nimport mockRpc$ from '../../utils/testHelpers/mockRpc';\n\nit('should return the correct frequency', () => {\n  expect(isObservable(getFrequency(mockRpc$))).toBe(true);\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/rpc/utils/getFrequency.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/types.d.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { Observable } from 'rxjs';\n\ndeclare global {\n  interface Window {\n    parity: any;\n  }\n}\n\nexport type Abi = Array<Object>; // TODO Better type?\n\n// TODO This should be on @parity/api\nexport type AccountsInfo = {\n  name: String;\n};\n\n// TODO This should be on @parity/api\nexport type Address = string;\n\nexport type Metadata = {\n  calledWithArgs?: {\n    [key: string]: any;\n  };\n  calls?: string[];\n  dependsOn?: string[];\n  frequency?: Observable<any>[];\n  name?: string;\n};\n\nexport interface FrequencyObservable<T> extends Observable<T> {\n  metadata: { name: string };\n}\n\nexport interface RpcObservable<T> {\n  (...args: any[]): Observable<T>;\n  metadata?: Metadata; // TODO All RpcObservables should have metadata?\n  setFrequency? (frequency: Observable<any>[]): void; // post$, makeContract$... don't have setFrequency\n}\n\n// TODO This should be on @parity/api\nexport type Tx = {\n  from: Address;\n  condition: any; // TODO Which type?\n  to: Address;\n};\n\nexport interface TxStatus {\n  confirmed: any; // TODO Receipt from @parity/api\n  estimating?: boolean;\n  estimated?: any; // BigNumber\n  requested?: string;\n  signed?: string;\n}\n\nexport interface WithError<T> {\n  error;\n}\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/types.d.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/utils/isLoading.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nexport const RPC_LOADING = Symbol('Fetching RPC...');\n\n/**\n * Check if a rpc$ value is loading.\n *\n * @param {Any} value - The value to test.\n * @return {Boolean} - Returns true if it's loading.\n */\nexport const isLoading = (value: any) => value === RPC_LOADING;\n\n/**\n * Check if a rpc$ value is `null, `undefined` or loading.\n *\n * @param {Any} value - The value to test.\n * @return {Boolean} - Returns true if it's `null, `undefined` or loading.\n */\nexport const isNullOrLoading = (value: any) =>\n  value == null || isLoading(value);\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/isLoading.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "RPC_LOADING",
    "memberof": "src/utils/isLoading.ts",
    "static": true,
    "longname": "src/utils/isLoading.ts~RPC_LOADING",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/isLoading.ts",
    "importStyle": "{RPC_LOADING}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "isLoading",
    "memberof": "src/utils/isLoading.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/isLoading.ts~isLoading",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/isLoading.ts",
    "importStyle": "{isLoading}",
    "description": "Check if a rpc$ value is loading.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if it's loading."
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "isNullOrLoading",
    "memberof": "src/utils/isLoading.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/isLoading.ts~isNullOrLoading",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/isLoading.ts",
    "importStyle": "{isNullOrLoading}",
    "description": "Check if a rpc$ value is `null, `undefined` or loading.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if it's `null, `undefined` or loading."
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/utils/isObservable.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { of } from 'rxjs';\n\nimport isObservable from './isObservable';\n\n/**\n * Helper function to test isObservable.\n *\n * @param {String} name - A friendly name to show what we are testing.\n * @param {Any} input - The input to the isObservable function.\n * @param {Boolean} expected - The expected output.\n */\nconst testIsObservable = (name, input, expected) => {\n  it(`should return ${expected} for a ${name}`, () => {\n    expect(isObservable(input)).toBe(expected);\n  });\n};\n\ntestIsObservable('Observable', of(1), true);\ntestIsObservable('function', () => null, false);\ntestIsObservable('object', {}, false);\ntestIsObservable('null', null, false);\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/isObservable.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "testIsObservable",
    "memberof": "src/utils/isObservable.spec.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/isObservable.spec.ts~testIsObservable",
    "access": "public",
    "export": false,
    "importPath": "@parity/light.js/src/utils/isObservable.spec.ts",
    "importStyle": null,
    "description": "Helper function to test isObservable.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A friendly name to show what we are testing."
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The input to the isObservable function."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The expected output."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/utils/isObservable.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { Observable } from 'rxjs';\n\n/**\n * @ignore\n * @param {Any} source$ - The Observable to test.\n * @return {Boolean} - Returns true if it's an Observable.\n */\nconst isObservable = (source$: Observable<any>): source$ is Observable<any> =>\n  source$ instanceof Observable;\n\nexport default isObservable;\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/isObservable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "isObservable",
    "memberof": "src/utils/isObservable.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/isObservable.ts~isObservable",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/isObservable.ts",
    "importStyle": "isObservable",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "source$",
        "description": "The Observable to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if it's an Observable."
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/utils/operators/distinctReplayRefCount.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { distinctReplayRefCount } from './distinctReplayRefCount';\nimport isObservable from '../isObservable';\nimport mockRpc$ from '../testHelpers/mockRpc';\n\nit('should return an Observable', () => {\n  expect(isObservable(mockRpc$().pipe(distinctReplayRefCount()))).toBe(true);\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/operators/distinctReplayRefCount.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/utils/operators/switchMapPromise.spec.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { skip } from 'rxjs/operators';\n\nimport mockRpc$ from '../testHelpers/mockRpc';\nimport { rejectApi, resolveApi } from '../testHelpers/mockApi';\nimport { RPC_LOADING } from '../isLoading';\nimport { switchMapPromise } from './switchMapPromise';\n\nit('should not error when the promise resolves with an error', done => {\n  mockRpc$()\n    .pipe(switchMapPromise(resolveApi({ error: 'bar' }).fake.method))\n    .subscribe();\n\n  // If after 0.1s, nothing has been called, then our Observable has not fired\n  // any event, which is what we want\n  setTimeout(done, 100);\n});\n\nit('should not error when the promise rejects', done => {\n  mockRpc$()\n    .pipe(switchMapPromise(rejectApi().fake.method))\n    .subscribe();\n\n  // If after 0.1s, nothing has been called, then our Observable has not fired\n  // any event, which is what we want\n  setTimeout(done, 100);\n});\n\nit('should fire an event when the promise resolves', done => {\n  mockRpc$()\n    .pipe(switchMapPromise(resolveApi().fake.method))\n    .subscribe(data => {\n      expect(data).toBe(RPC_LOADING);\n      done();\n    });\n});\n\nit('should fire an event when the promise resolves', done => {\n  mockRpc$()\n    .pipe(\n      switchMapPromise(resolveApi().fake.method),\n      skip(1) // Skip the RPC_LOADING\n    )\n    .subscribe(data => {\n      expect(data).toBe('foo');\n      done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/operators/switchMapPromise.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/utils/testHelpers/mockApi.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\n/**\n * A pubsub Api object that rejects.\n *\n * @ignore\n */\nexport const rejectApi = (rejectWith = new Error('bar'), isPubSub = true) => ({\n  fake: {\n    method () {\n      return Promise.reject(rejectWith);\n    }\n  },\n  isPubSub,\n  pubsub: {\n    fake: {\n      method (callback) {\n        callback(rejectWith, null);\n        return Promise.resolve(1); // Resolves to subscriptionId\n      }\n    },\n    unsubscribe: () => Promise.resolve()\n  }\n});\n\n/**\n * A pubsub Api object that resolves.\n *\n * @ignore\n */\nexport const resolveApi = (\n  resolveWith: string | { error: string } = 'foo',\n  isPubSub = true\n) => ({\n  fake: {\n    method () {\n      return Promise.resolve(resolveWith);\n    }\n  },\n  isPubSub,\n  pubsub: {\n    fake: {\n      method (callback) {\n        callback(null, resolveWith);\n        return Promise.resolve(1); // Resolves to subscriptionId\n      }\n    },\n    unsubscribe: () => Promise.resolve()\n  }\n});\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/testHelpers/mockApi.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "rejectApi",
    "memberof": "src/utils/testHelpers/mockApi.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/testHelpers/mockApi.ts~rejectApi",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/testHelpers/mockApi.ts",
    "importStyle": "{rejectApi}",
    "description": "A pubsub Api object that rejects.",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "rejectWith",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "isPubSub",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "resolveApi",
    "memberof": "src/utils/testHelpers/mockApi.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/testHelpers/mockApi.ts~resolveApi",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/testHelpers/mockApi.ts",
    "importStyle": "{resolveApi}",
    "description": "A pubsub Api object that resolves.",
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "resolveWith",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "foo",
        "defaultValue": "foo"
      },
      {
        "name": "isPubSub",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/utils/testHelpers/mockRpc.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport { of, timer } from 'rxjs';\n\nimport createRpc from '../../rpc/utils/createRpc';\n\n/**\n * Create a fake rpc$ Observable.\n *\n * @ignore\n */\nconst mockRpc$ = createRpc({ frequency: [timer(0, 1000)] })(() =>\n  of('mockRpc')\n);\n\nexport default mockRpc$;\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/testHelpers/mockRpc.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "mockRpc$",
    "memberof": "src/utils/testHelpers/mockRpc.ts",
    "static": true,
    "longname": "src/utils/testHelpers/mockRpc.ts~mockRpc$",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/testHelpers/mockRpc.ts",
    "importStyle": "mockRpc$",
    "description": "Create a fake rpc$ Observable.",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/utils/testHelpers/testFrequency.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport isObservable from '../isObservable';\n\n/**\n * Helper function to make basic tests for frequency$ observables.\n *\n * @ignore\n */\nconst testFrequency = (name, frequency$) =>\n  describe(`${name} rpc`, () => {\n    it('should be an Observable', () => {\n      expect(isObservable(frequency$)).toBe(true);\n    });\n\n    it('should be subscribable', () => {\n      expect(() => frequency$.subscribe()).not.toThrow();\n    });\n\n    it('should contain a `metadata` field', () => {\n      console.log(frequency$);\n      expect(frequency$.metadata).toBeTruthy();\n    });\n\n    it('should contain `name` in metadata', () => {\n      const { metadata } = frequency$;\n      expect(metadata.name).toBeTruthy();\n    });\n  });\n\nexport default testFrequency;\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/testHelpers/testFrequency.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "testFrequency",
    "memberof": "src/utils/testHelpers/testFrequency.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/testHelpers/testFrequency.ts~testFrequency",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/testHelpers/testFrequency.ts",
    "importStyle": "testFrequency",
    "description": "Helper function to make basic tests for frequency$ observables.",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "frequency$",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/utils/testHelpers/testRpc.ts",
    "content": "// Copyright 2015-2018 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n//\n// SPDX-License-Identifier: MIT\n\nimport isObservable from '../isObservable';\n\n/**\n * Helper function to make basic tests for rpc$ observables.\n *\n * @ignore\n */\nconst testRpc = (name, rpc$) =>\n  describe(`${name} rpc`, () => {\n    it('should be a function', () => {\n      expect(typeof rpc$).toBe('function');\n    });\n\n    it('function should return an Observable', () => {\n      expect(isObservable(rpc$())).toBe(true);\n    });\n\n    it('function result Observable should be subscribable', () => {\n      expect(() => rpc$().subscribe()).not.toThrow();\n    });\n\n    it('function should return the same Observable upon re-running (memoization)', () => {\n      const initial$ = rpc$();\n      expect(rpc$()).toBe(initial$);\n    });\n\n    it('should contain a `metadata` field', () => {\n      expect(rpc$.metadata).toBeTruthy();\n    });\n\n    it('should either contain a `frequency` or `dependsOn` field in metadata', () => {\n      const { metadata } = rpc$;\n      expect(\n        (metadata.frequency && metadata.frequency.length) || metadata.dependsOn\n      ).toBeTruthy();\n    });\n  });\n\nexport default testRpc;\n",
    "static": true,
    "longname": "/Users/amaurymartiny/Workspace/light.js/src/utils/testHelpers/testRpc.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "testRpc",
    "memberof": "src/utils/testHelpers/testRpc.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/testHelpers/testRpc.ts~testRpc",
    "access": "public",
    "export": true,
    "importPath": "@parity/light.js/src/utils/testHelpers/testRpc.ts",
    "importStyle": "testRpc",
    "description": "Helper function to make basic tests for rpc$ observables.",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "rpc$",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# @parity/light.js\n\nA high-level reactive JS library optimized for light clients.\n\n## Getting Started\n\n```bash\nyarn install @parity/light.js\n```\n\n## Usage\n\nReactively observe JSONRPC methods:\n\n```javascript\nimport { defaultAccount$ } from '@parity/light.js';\n\ndefaultAccount$().subscribe(publicAddress => console.log(publicAddress));\n// Outputs your public address 0x...\n// Everytime you change your default account (e.g. via MetaMask), it will output your new public address\n```\n\nAll RxJS tools are available for manipulating Observables:\n\n```javascript\nimport { balanceOf$, blockNumber$, defaultAccount$ } from '@parity/light.js';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n// Only log pair blocks\nblockNumber$()\n  .pipe(filter(n => n % 2 === 0))\n  .subscribe(console.log);\n\n// Get the balance of the default account\n// Will update when balance or default account changes\ndefaultAccount$()\n  .pipe(\n    switchMap(balanceOf$),\n    map(value => +value) // Return number instead of BigNumber\n  )\n  .subscribe(console.log);\n\n// There's actually an alias for the above Observable:\nimport { myBalance$ } from '@parity/light.js';\nmyBalance$().subscribe(console.log);\n```\n\nContract support:\n\n```javascript\nimport { defaultAccount$, makeContract$ } from '@parity/light.js';\nimport { map, switchMap } from 'rxjs/operators';\n\ndefaultAccount$()\n  .pipe(\n    switchMap(defaultAccount =>\n      makeContract$(/* contract address */, /* abi */)\n        .myMethod(defaultAccount) // Calling method of contract with arguments\n    )  )\n  .subscribe(console.log); // Will log the result, and everytime the result changes\n```\n\nAll available methods are documented [in the docs](https://parity-js.github.io/light.js/).\n\n## Usage with React\n\nThe libray provides a higher-order component to use these Observables easily with React apps.\n\n```javascript\nimport light from '???'; // ??? to be decided\nimport { syncing$ } from '@parity/light.js';\n\n@light({\n  syncingVariable: syncing$\n})\nclass MyClass extends React.Component {\n  render() {\n    return <div>{JSON.stringify(this.props.syncingVariable)}</div>;\n  }\n}\n```\n\nThe UI will automatically update when the syncing state changes.\n\n## Advanced Usage\n\n### Frequency\n\nEach Observable has a frequency upon which it is called. The frequency is documented in each method's [documentation](https://parity-js.github.io/light.js/).\n\nFor example, the frequency of `balanceOf$` is:\n\n`frequency: [onStartup$, onEvery2Blocks$]`\n\nwhich means that the underlying JSONRPC call `eth_getBalance` will be made once when the Observable is subscribed (on startup), and once every 2 blocks.\n\nFor the needs of your dapp, you can change the frequency of all Observables like this:\n\n```javascript\nimport { balanceOf$, onEvery2Seconds$, onStartup$ };\n\nbalanceOf$.setFrequency([onStartup$, onEvery2Seconds$]);\nbalanceOf$('0x123').subscribe(console.log);\n// `eth_getBalance` will be called once immediately, and once every 2 seconds\n```\n\nA list of possible frequency Observables is here [TODO doc link], but you can of course put any array of Observables you want.\n\n### RPC Overview\n\nTo see an overview of all currently active Observables, type `window.parity.rpcOverview()` in the browser console. The output will be:\n\n```javascript\n{\n  accounts$: {\n    calls: ['eth_accounts'],\n    frequency: ['onAccountsChanged$'],\n    subscribersCount: 4\n  },\n  balanceOf$: {\n    calls: ['eth_getBalance'],\n    frequency: ['onEvery2Blocks$', 'onStartup$'],\n    subscribersCount: 2\n  },\n  defaultAccount$: {\n    dependsOn: ['accounts$'],\n    subscribersCount: 3\n  },\n  height$: {\n    frequency: ['onEveryBlock$'],\n    subscribersCount: 2\n  },\n  me$: {\n    dependsOn: ['defaultAccount$'],\n    subscribersCount: 1\n  },\n  syncing$: {\n    frequency: ['onSyncingChanged$'],\n    subscribersCount: 1\n  }\n}\n```\n\nThe keys are the Observables you are using in your dapp, each containing an object where:\n\n- `calls`: the underlying JSONRPC calls made.\n- `dependsOn`: means that the current Observable depends on other Observables, so it doesn't make any JSONRPC calls itself, and doesn't have a frequency.\n- `frequency`: the frequency upon which the Observable is called.\n- `subscribersCount`: the number of subscribers this Observable has.\n\nThis output can of course be different on different pages of your dapp, if they use different Observables.\n\n## Notes about Implementation\n\n### Observables are cold\n\nThe underlying JSONRPC method is only called if there's at least one subscriber.\n\n```javascript\nimport { balanceOf$ } from '@parity/light.js';\n\nconst myObs$ = balanceOf$('0x123');\n// Observable created, but `eth_getBalance` not called yet\nconst subscription = myObs$.subscribe(console.log);\n// `eth_getBalance` called for the 1st time\n\n// Some other code...\n\nsubscription.unsubscribe();\n// `eth_getBalance` stops being called\n```\n\n### Observables are PublishReplay(1)\n\nLet's take `blockNumber()$` which fires blocks 7, 8 and 9, and has 3 subscribers that don't subscribe at the same time.\n\nWe have the following marble diagram (`^` denotes when the subscriber subscribes).\n\n```\nblockNumber$(): -----7----------8------9-----|\nsubscriber1:    -^---7----------8------9-----|\nsubscriber2:    ------------^7--8------9-----|\nsubscriber3:    --------------------------^9-|\n```\n\nNote: the default behavior for Observables is without PublishReplay, i.e.\n\n```\nblockNumber$(): -----7----------8------9-----|\nsubscriber1:    -^---7----------8------9-----|\nsubscriber2:    ------------^---8------9-----|\nsubscriber3:    --------------------------^--|\n```\n\nBut Observables in this library are PublishReplay(1). [Read more](https://blog.angularindepth.com/rxjs-how-to-use-refcount-73a0c6619a4e) about PublishReplay.\n\n### Observables are memoized\n\n```javascript\nconst obs1$ = balanceOf$('0x123');\nconst obs2$ = balanceOf$('0x123');\nconsole.log(obs1$ === obs2$); // true\n\nconst obs3$ = balanceOf$('0x456');\nconsole.log(obs1$ === obs3$); // false\n```\n\n### Underlying API calls are not unnessarily repeated\n\n```javascript\nconst obs1$ = balanceOf$('0x123');\nconst obs2$ = balanceOf$('0x123');\n\nobs1$.subscribe(console.log);\nobs1$.subscribe(console.log);\nobs2$.subscribe(console.log);\n// Logs 3 times the balance\n// But only one call to `eth_getBalance` has been made\n\nconst obs3$ = balanceOf$('0x456');\n// Logs a new balance, another call to `eth_getBalance` is made\n```\n\n### Underlying PubSub subscriptions are dropped when there's no subscriber\n\n```javascript\nimport { blockNumber$ } from '@parity/light.js';\n\nconst myObs$ = blockNumber$();\nconsole.log(blockNumber$.frequency); // [onEveryBlock$]\n// Note: onEveryBlock$ creates a pubsub on `eth_blockNumber`\n\nconst subscription = myObs$.subscribe(console.log);\n// Creates a pubsub subscription\n\n// Some other code...\n\nsubscription.unsubscribe();\n// Drops the pubsub subscription\n```\n\n## TODO\n\n- Don't commit `lib/` anymore, when it's on npm.\n- Switch to TypeScript.\n- Have 100% test coverage.\n",
    "longname": "/Users/amaurymartiny/Workspace/light.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@parity/light.js\",\n  \"description\": \"A high-level reactive JS library optimized for light clients\",\n  \"version\": \"1.0.0\",\n  \"main\": \"lib/index.js\",\n  \"author\": \"Parity Team <admin@parity.io>\",\n  \"maintainers\": [\n    \"Jaco Greeff\",\n    \"Amaury Martiny\"\n  ],\n  \"contributors\": [],\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/parity-js/light.js.git\"\n  },\n  \"keywords\": [\n    \"API\",\n    \"Ethereum\",\n    \"Light\",\n    \"Light Client\",\n    \"Observable\",\n    \"Parity\",\n    \"Reactive\",\n    \"RxJS\"\n  ],\n  \"scripts\": {\n    \"build\": \"rimraf lib && tsc\",\n    \"docs\": \"esdoc\",\n    \"lint\": \"tslint 'src/**/*.ts'\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"@parity/api\": \"^2.1.23\",\n    \"json-prune\": \"^1.1.0\",\n    \"memoizee\": \"^0.4.12\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.1.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"jest\": \"^23.1.0\",\n    \"rimraf\": \"^2.6.2\",\n    \"rxjs\": \"^6.2.1\",\n    \"ts-jest\": \"^23.0.0\",\n    \"tslint\": \"^5.10.0\",\n    \"tslint-config-semistandard\": \"^7.0.0\",\n    \"typescript\": \"^2.9.2\"\n  },\n  \"peerDependencies\": {\n    \"rxjs\": \"^6.2.1\"\n  }\n}\n",
    "longname": "/Users/amaurymartiny/Workspace/light.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]